package com.kilowatt.WattVM.Instructions;

import com.kilowatt.Compiler.WattCompiler;
import com.kilowatt.Errors.WattParseError;
import com.kilowatt.Errors.WattRuntimeError;
import com.kilowatt.WattVM.*;
import com.kilowatt.WattVM.Chunks.VmChunk;
import com.kilowatt.WattVM.Builtins.VmBuiltinFunction;
import com.kilowatt.WattVM.Codegen.VmCodeDumper;
import com.kilowatt.WattVM.Entities.VmFunction;
import com.kilowatt.WattVM.Entities.VmInstance;
import com.kilowatt.WattVM.Entities.VmUnit;
import com.kilowatt.WattVM.Reflection.VmCallInfo;
import com.kilowatt.WattVM.Entities.VmTable;
import lombok.Getter;
import lombok.SneakyThrows;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

/*
–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ VM
 */
@SuppressWarnings("ClassCanBeRecord")
@Getter
public class VmInstructionCall implements VmInstruction {
    // –∞–¥—Ä–µ—Å—Å
    private final VmAddress address;
    // –∏–º—è
    private final String name;
    // –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Å–µ—Å—Å
    private final boolean hasPrevious;
    // –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    private final VmChunk args;
    // –≤—ã–∫–ª—é—á–µ–Ω –ª–∏ –ø—É—à
    private final boolean shouldPushResult;

    // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public VmInstructionCall(VmAddress address, String name, VmChunk args,
                             boolean hasPrevious, boolean shouldPushResult) {
        this.address = address;
        this.name = name; this.args = args; this.hasPrevious = hasPrevious;
        this.shouldPushResult = shouldPushResult;
    }

    @Override
    public void run(WattVM vm, VmTable<String, Object> table)  {
        // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—ã–∑–æ–≤–µ
        WattCompiler.vm.getCallsTrace().add(new VmCallInfo(address, name, table));
        // –≤—ã–∑–æ–≤
        if (!hasPrevious) {
            callGlobalFunc(vm, table);
        } else {
            Object last = vm.pop(address);
            if (last instanceof VmInstance vmInstance) {
                callInstanceFunc(vm, table, vmInstance);
            } else if (last instanceof VmUnit vmUnit){
                callUnitFunc(vm, table, vmUnit);
            } else {
                callReflectionFunc(vm, table, last);
            }
        }
    }

    @Override
    public void print(int indent) {
        VmCodeDumper.dumpLine(indent, "CALL("+name+", SP: " + shouldPushResult + ")");
        VmCodeDumper.dumpLine(indent + 1, "ARGS:");
        for (VmInstruction instruction : args.getInstructions()) {
            instruction.print(indent + 2);
        }
    }

    // –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü—é –æ–±—ä–µ–∫—Ç–∞
    private void callInstanceFunc(WattVM vm, VmTable<String, Object> table, VmInstance instance)  {
        // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
        int argsAmount = passArgs(vm, table);
        Object val = instance.getFields().lookupLocal(address, name);
        // —Ñ—É–Ω–∫—Ü–∏—è
        if (val instanceof VmFunction fn) {
            checkArgs(instance.getType().getName() + ":" + name, fn.getParams().size(), argsAmount);
            // –≤—ã–∑–æ–≤
            instance.call(address, name, vm, shouldPushResult);
        }
        // –Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        else if (val instanceof VmBuiltinFunction fn) {
            checkArgs(instance.getType().getName() + ":" + name, fn.paramsAmount(), argsAmount);
            // –≤—ã–∑–æ–≤
            fn.exec(vm, address, shouldPushResult);
        }
        // –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ - –æ—à–∏–±–∫–∞
        else {
            throw new WattRuntimeError(address,
                "couldn't call: " + name + ", not a fn.",
                "check your code.");
        }
    }

    // –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü—é —é–Ω–∏—Ç–∞
    private void callUnitFunc(WattVM vm, VmTable<String, Object> table, VmUnit unit)  {
        // –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
        int argsAmount = passArgs(vm, table);
        Object val = unit.getFields().lookupLocal(address, name);
        // —Ñ—É–Ω–∫—Ü–∏—è
        if (val instanceof VmFunction fn) {
            checkArgs(unit.getName() + ":" + name, fn.getParams().size(), argsAmount);
            // –≤—ã–∑–æ–≤
            unit.call(address, name, vm, shouldPushResult);
        }
        // –Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        else if (val instanceof VmBuiltinFunction fn) {
            checkArgs(unit.getName() + ":" + name, fn.paramsAmount(), argsAmount);
            // –≤—ã–∑–æ–≤
            fn.exec(vm, address, shouldPushResult);
        }
        // –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ - –æ—à–∏–±–∫–∞
        else {
            throw new WattRuntimeError(address,
                "couldn't call: " + name + ", not a fn.",
                "check your code.");
        }
    }

    // –í—ã–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–π–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    @SneakyThrows
    private void callReflectionFunc(WattVM vm, VmTable<String, Object> table, Object last) {
        // –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        int argsAmount = passArgs(vm, table);
        Object[] callArgs = toJvmArgs(vm, argsAmount);
        // –ø–æ–∏—Å–∫ –º–µ—Ç–æ–¥–∞
        Method fun = vm.getReflection().findMethod(
                address, last.getClass(), name,
                argsAmount, Arrays.stream(callArgs)
                    .map(Object::getClass)
                    .toArray(Class[]::new)
        );
        fun.setAccessible(true);
        // –≤—ã–∑–æ–≤
        try {
            // üëá –í–û–ó–í–†–ê–©–ê–ï–¢ NULL, –ï–°–õ–ò –§–£–ù–ö–¶–ò–Ø –ù–ò–ß–ï–ì–û –ù–ï –í–û–ó–í–†–ê–©–ê–ï–¢
            Object returned = fun.invoke(last, callArgs);
            if (shouldPushResult) {
                vm.push(returned);
            }
        } catch (IllegalAccessException | IllegalArgumentException e) {
            throw new WattRuntimeError(
                address,
                "jvm call error (" + name + "): " + e.getMessage(), "check your code."
            );
        } catch (InvocationTargetException e) {
            if (e.getCause() instanceof WattRuntimeError ||
                    e.getCause() instanceof WattParseError) {
                throw e.getCause();
            } else {
                String message = e.getCause().getMessage() != null ?
                        e.getCause().getMessage() : e.getCause().getClass().getSimpleName();
                throw new WattRuntimeError(
                    address,
                    "jvm call error (" + name + "): " + message, "check your code."
                );
            }
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è jvm –º–µ—Ç–æ–¥–∞.
    private Object[] toJvmArgs(WattVM vm, int argsAmount) {
        // —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
        Object[] callArgs = new Object[argsAmount];
        // –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
        for (int i = argsAmount - 1; i >= 0; i--) {
            callArgs[i] = vm.pop(address);
        }
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        return callArgs;
    }

    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—É–ø–∞
    private void callGlobalFunc(WattVM vm, VmTable<String, Object> table)  {
        // –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        int argsAmount = passArgs(vm, table);
        Object o = table.lookup(address, name);
        // —Ñ—É–Ω–∫—Ü–∏—è
        if (o instanceof VmFunction fn) {
            checkArgs(fn.getName(), fn.getParams().size(), argsAmount);
            fn.exec(vm, shouldPushResult);
        }
        // –Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        else if (o instanceof VmBuiltinFunction fn) {
            checkArgs(fn.getName(), fn.paramsAmount(), argsAmount);
            fn.exec(vm, address, shouldPushResult);
        }
        // –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ - –æ—à–∏–±–∫–∞
        else {
            throw new WattRuntimeError(address,
                "couldn't call: " + name + ", not a fn.",
                "check your code.");
        }
    }

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    private void checkArgs(String name, int parameterAmount, int argsAmount) {
        if (parameterAmount != argsAmount) {
            throw new WattRuntimeError(address,
                "invalid args amount for call: "
                        + name + "(" + argsAmount + "/" + parameterAmount + ")",
                "check passing args amount.");
        }
    }

    // –ø–æ–º–µ—â–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç–µ–∫
    private int passArgs(WattVM vm, VmTable<String, Object> table)  {
        int size = vm.getStack().size();
        args.run(vm, table);
        return vm.getStack().size()-size;
    }

    @Override
    public String toString() {
        return "CALL_FUNCTION(" + name + ",instrs:" + args.getInstructions().size() + ")";
    }
}
