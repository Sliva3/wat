import 'std.typeof'
import 'std.math'

unit math_ext {
    // константы
    pi := 3.141592
    e := 2.718281
    tau := 6.283185

    // рефлекися
    math_reflection := __refl__.reflect(
        'com.kilowatt.Compiler.Builtins.Libraries.Std.Math.StdMathExt',
        []
    )

    // функции
    fun sin(x) {
        return math_reflection.sin(x)
    }

    fun cos(x) {
        return math_reflection.cos(x)
    }

    fun tan(x) {
        return math_reflection.tan(x)
    }

    fun asin(x) {
        return math_reflection.asin(x)
    }

    fun acos(x) {
        return math_reflection.acos(x)
    }

    fun atan(x) {
        return math_reflection.atan(x)
    }
}

// пример:
// [0, 1, 2] row row
// [3, 4, 5]
// [6, 7, 8]
type Matrix(fill) {
    // список
    arr := []

    // инициализация
    fun init {
        // проверка типов
        if (typeof(fill) != 'WattList') {
            throw error(
                'matrix fill must be a list, not ' + typeof(fill),
                'check for types.'
            )
        }

        // создаём массив
        for y in 0 to fill.size() {
            row := []
            for x in 0 to fill.size() {
                row.add(fill.get(y).get(x))
            }
            arr.add(row)
        }
    }

    // изменение позиции
    fun set(x, y, value) {
        // проверка типов
        if (typeof(x) != 'int') {
            throw error(
                'matrix x amount must be an int, not ' + typeof(x),
                'check for types.'
            )
        }
        if (typeof(y) != 'int') {
            throw error(
                'matrix y amount must be an int, not ' + typeof(y),
                'check for types.'
            )
        }
        // изменение
        arr.get(y).set(x, value)
    }

    // сложение матриц
    fun add(matrix) {
        // проверка типов
        if (typeof(matrix) != 'Matrix') {
            throw error(
                'to add matrix, value must be an Matrix, not ' + typeof(matrix),
                'check for types.'
            )
        }
        // проверка размеров
        if (matrix.arr.size() != arr.size()) {
            throw error(
                'could not add matrix with different size',
                'check for sizes.'
            )
        }
        // новая матрица
        new_matrix := new Matrix(self.arr)
        // складываем
        for y in 0 to arr.size() {
            for x in 0 to arr.size() {
                old_value := new_matrix.arr.get(y).get(x)
                new_matrix.arr.get(y).set(x, old_value+matrix.arr.get(y).get(x))
            }
        }
        // возвращаем
        return new_matrix
    }

    // вычитание матриц
    fun sub(matrix) {
        // проверка типов
        if (typeof(matrix) != 'Matrix') {
            throw error(
                'to sub matrix, value must be an Matrix, not ' + typeof(matrix),
                'check for types.'
            )
        }
        // проверка размеров
        if (matrix.arr.size() != arr.size()) {
            throw error(
                'could not sub matrix with different size',
                'check for sizes.'
            )
        }
        // новая матрица
        new_matrix := new Matrix(self.arr)
        // складываем
        for y in 0 to arr.size() {
            for x in 0 to arr.size() {
                old_value := new_matrix.arr.get(y).get(x)
                new_matrix.arr.get(y).set(x, old_value-matrix.arr.get(y).get(x))
            }
        }
        // возвращаем
        return new_matrix
    }

    // умножение матриц
    fun mul(matrix) {
        // проверка типов
        if (typeof(matrix) != 'Matrix') {
            throw error(
                'to mul matrix, value must be an Matrix, not ' + typeof(matrix),
                'check for types.'
            )
        }
        // проверка размеров
        if (matrix.arr.size() != arr.size()) {
            throw error(
                'could not mul matrix with different size',
                'check for sizes.'
            )
        }
        // новая матрица
        new_matrix := new Matrix(self.arr)
        // складываем
        for y in 0 to arr.size() {
            for x in 0 to arr.size() {
                old_value := new_matrix.arr.get(y).get(x)
                new_matrix.arr.get(y).set(x, old_value*matrix.arr.get(y).get(x))
            }
        }
        // возвращаем
        return new_matrix
    }

    // деление матриц
    fun div(matrix) {
        // проверка типов
        if (typeof(matrix) != 'Matrix') {
            throw error(
                'to div matrix, value must be an Matrix, not ' + typeof(matrix),
                'check for types.'
            )
        }
        // проверка размеров
        if (matrix.arr.size() != arr.size()) {
            throw error(
                'could not div matrix with different size',
                'check for sizes.'
            )
        }
        // новая матрица
        new_matrix := new Matrix(self.arr)
        // складываем
        for y in 0 to arr.size() {
            for x in 0 to arr.size() {
                old_value := new_matrix.arr.get(y).get(x)
                new_matrix.arr.get(y).set(x, old_value/matrix.arr.get(y).get(x))
            }
        }
        // возвращаем
        return new_matrix
    }

    // в строку
    fun to_string {
        str := '['

        for elem in 0 to arr.size() {
            str += '[' + arr.get(elem).stringify() + ']'
        }

        str += ']'

        return str
    }
}

type Vec3(x,y,z) {
    fun init {
        // функция проверки типа
        fun check_type(name, val) {
            if (val != 'int' and val != 'float' and val != 'long') {
                throw error(
                    'to create vector, value: ' + name + ' must be a number, not ' + typeof(matrix),
                    'check for types.'
                )
            }
        }
        // проверка типов
        check_type('x', typeof(x))
        check_type('y', typeof(y))
        check_type('z', typeof(z))
    }
    fun add(vec) {
        if (typeof(vec) != 'Vec3') {
            error (
                'could not add ' + vec_type + ' to Vec3',
                'check for types.'
            )
        }
        x += vec.x
        y += vec.y
        z += vec.z
    }
    fun sub(vec) {
        if (typeof(vec) != 'Vec3') {
            error (
                'could not sub ' + vec_type + ' to Vec3',
                'check for types.'
            )
        }
        x -= vec.x
        y -= vec.y
        z -= vec.z
    }
    fun mul(vec) {
        if (typeof(vec) != 'Vec3') {
            error (
                'could not mul ' + vec_type + ' to Vec3',
                'check for types.'
            )
        }
        x *= vec.x
        y *= vec.y
        z *= vec.z
    }
    fun div(vec) {
        if (typeof(vec) != 'Vec3') {
            error (
                'could not div( ' + vec_type + ' to Vec3',
                'check for types.'
            )
        }
        x /= vec.x
        y /= vec.y
        z /= vec.z
    }
    fun normalize {
        vec = new Vec3(0,0,0)

        fun normalize_value(val) {
            if val < 0 {
                return -1
            } elif val > 0 {
                return 1
            } else {
                return 0
            }
        }

        vec.x = normalize_value(x)
        vec.y = normalize_value(y)
        vec.z = normalize_value(z)

        return vec
    }
    fun to_string {
        return '(' + 'x: ' + x + ', y: ' + y + ', z: ' + z + ')'
    }
}

type Vec2(x,y) {
    fun init {
        // функция проверки типа
        fun check_type(name, val) {
            if (val != 'int' and val != 'float' and val != 'long') {
                throw error(
                    'to create vector, value: ' + name + ' must be a number, not ' + typeof(matrix),
                    'check for types.'
                )
            }
        }
        // проверка типов
        check_type('x', typeof(x))
        check_type('y', typeof(y))
    }
    fun add(vec) {
        if (typeof(vec) != 'Vec2') {
            error (
                'could not add ' + vec_type + ' to Vec2',
                'check for types.'
            )
        }
        x += vec.x
        y += vec.y
    }
    fun sub(vec) {
        if (typeof(vec) != 'Vec2') {
            error (
                'could not sub ' + vec_type + ' to Vec2',
                'check for types.'
            )
        }
        x -= vec.x
        y -= vec.y
    }
    fun mul(vec) {
        if (typeof(vec) != 'Vec2') {
            error (
                'could not mul ' + vec_type + ' to Vec2',
                'check for types.'
            )
        }
        x *= vec.x
        y *= vec.y
    }
    fun div(vec) {
        if (typeof(vec) != 'Vec2') {
            error (
                'could not div( ' + vec_type + ' to Vec2',
                'check for types.'
            )
        }
        x /= vec.x
        y /= vec.y
    }
    fun normalize {
        vec = new Vec2(0,0)

        fun normalize_value(val) {
            if val < 0 {
                return -1
            } elif val > 0 {
                return 1
            } else {
                return 0
            }
        }

        vec.x = normalize_value(x)
        vec.y = normalize_value(y)

        return vec
    }
    fun to_string {
        return '(' + 'x: ' + x + ', y: ' + y + ')'
    }
}


type Vec4(x,y,z,w) {
    fun init {
        // функция проверки типа
        fun check_type(name, val) {
            if (val != 'int' and val != 'float' and val != 'long') {
                throw error(
                    'to create vector, value: ' + name + ' must be a number, not ' + typeof(matrix),
                    'check for types.'
                )
            }
        }
        // проверка типов
        check_type('x', typeof(x))
        check_type('y', typeof(y))
        check_type('z', typeof(z))
        check_type('w', typeof(w))
    }
    fun add(vec) {
        if (typeof(vec) != 'Vec4') {
            error (
                'could not add ' + vec_type + ' to Vec4',
                'check for types.'
            )
        }
        x += vec.x
        y += vec.y
        z += vec.z
        w += vec.w
    }
    fun sub(vec) {
        if (typeof(vec) != 'Vec4') {
            error (
                'could not sub ' + vec_type + ' to Vec4',
                'check for types.'
            )
        }
        x -= vec.x
        y -= vec.y
        z += vec.z
        w += vec.w
    }
    fun mul(vec) {
        if (typeof(vec) != 'Vec4') {
            error (
                'could not mul ' + vec_type + ' to Vec4',
                'check for types.'
            )
        }
        x *= vec.x
        y *= vec.y
        z *= vec.z
        w *= vec.w
    }
    fun div(vec) {
        if (typeof(vec) != 'Vec4') {
            error (
                'could not div( ' + vec_type + ' to Vec4',
                'check for types.'
            )
        }
        x /= vec.x
        y /= vec.y
        z /= vec.z
        w /= vec.w
    }
    fun normalize {
        vec = new Vec4(0,0,0,0)

        fun normalize_value(val) {
            if val < 0 {
                return -1
            } elif val > 0 {
                return 1
            } else {
                return 0
            }
        }

        vec.x = normalize_value(x)
        vec.y = normalize_value(y)
        vec.z = normalize_value(z)
        vec.w = normalize_value(w)

        return vec
    }
    fun to_string {
        return '(' + 'x: ' + x + ', y: ' + y + ', z: ' + z + ', w: ' + w + ')'
    }
}

type Complex(real, imag) {
    fun init {
        // функция проверки типа
        fun check_type(name, val) {
            if (val != 'int' and val != 'float' and val != 'long') {
                throw error(
                    'to create complex number, value: ' + name + ' must be a number, not ' + typeof(val),
                    'check for types.'
                )
            }
        }
        // проверяем
        check_type('real', typeof(real))
        check_type('imag',  typeof(imag))
    }

    fun add(other) {
        if (typeof(other) != 'Complex') {
            throw error('could not add ' + other + ' and complex number', 'check for types.')
        }
        return new Complex(real + other.real, imag + other.imag)
    }

    fun sub(other) {
        if (typeof(other) != 'Complex') {
            throw error('could not sub ' + other + ' and complex number', 'check for types.')
        }
        return new Complex(real - other.real, imag - other.imag)
    }

    fun mul(other) {
        if (typeof(other) != 'Complex') {
            throw error('could not mul ' + other + ' and complex number', 'check for types.')
        }
        r = real * other.real - imag * other.imag
        i = real * other.imag + imag * other.real
        return new Complex(r, i)
    }

    fun div(other) {
        if (typeof(other) != 'Complex') {
            throw error('could not div ' + other + ' and complex number', 'check for types.')
        }
        denom = other.real * other.real + other.imag * other.imag
        if (denom == 0) {
            throw error('division by zero.', 'check your code.')
        }
        r = (real * other.real + imag * other.imag) / denom
        i = (imag * other.real - real * other.imag) / denom
        return new Complex(r, i)
    }

    fun conjugate {
        return new Complex(real, 0 - imag)
    }

    fun to_string {
        if real == 0 {
            return imag + 'i'
        }
        if imag == 0 {
            return real + ''
        }
        imag_string := ''
        if (imag > 0) {
            imag_string += '+' + imag + 'i'
        } else {
            imag_string += '-' + imag + 'i'
        }
        return real + imag_string
    }

    fun abs {

    }
}