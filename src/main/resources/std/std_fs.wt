unit fs {
    std_reflection_fs := __refl__.reflect(
        'com.kilowatt.Compiler.Builtins.Libraries.Std.Fs.StdFs',
        []
    )

    fun read_text(path) {
        return std_reflection_fs.read_text(path)
    }

    fun read_bytes(path) {
        return std_reflection_fs.read_bytes(path)
    }

    fun write_text(path, text) {
        return std_reflection_fs.write_text(path, text)
    }

    fun write_bytes(path, bytes) {
        return std_reflection_fs.write_bytes(path, bytes)
    }

    fun path_of(string) {
        return std_reflection_fs.path_of(string)
    }

    fun open_writer(path) {
        return std_reflection_fs.open_writer(path)
    }

    fun is_exists(path) {
        return std_reflection_fs.is_exists(path)
    }

    fun create_file(path) {
        std_reflection_fs.create_file(path)
    }

    fun create_directory(path) {
        std_reflection_fs.create_directory(path)
    }

    fun delete_path(path) {
        std_reflection_fs.delete_path(path)
    }

    fun copy_path(from, to) {
        std_reflection_fs.copy_path(from, to)
    }

    fun move_path(from, to) {
        std_reflection_fs.move_path(from, to)
    }
}

type ReadBytesStream(bytes) {
    bytes_stream := __refl__.reflect(
        'java.io.ByteArrayInputStream',
        [bytes]
    )
    stream := __refl__.reflect(
        'java.io.DataInputStream',
        [self.bytes_stream]
    )
    fun read_int {
        return stream.readInt()
    }
    fun read_float {
        return stream.readFloat()
    }
    fun read_string {
        return stream.readUTF()
    }
    fun read_bool {
        return stream.readBoolean()
    }
    fun read_long {
        return stream.readLong()
    }
    fun read_byte {
        return stream.readByte()
    }
    fun skip(n) {
        stream.skipBytes(n)
    }
    fun close {
        stream.close()
    }
}