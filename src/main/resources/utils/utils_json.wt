import 'std.strings'
import 'std.convert'
import 'std.typeof'

// json token type
unit JsonTokenType {
    STRING := 'string'
    LBRACE := 'lbrace'
    RBRACE := 'rbrace'
    LBRACKET := 'lbracket'
    RBRACKET := 'rbracket'
    COMMA := 'comma'
    BOOL := 'bool'
    NUMBER := 'number'
    COLON := 'colon'
}

// json token
type JsonToken(value_type, value, line) {

}

// json
unit json {
    // пасирнг ключа
    fun lex(code) {
        tokens := []
        line := 1
        index := 0

        // получение символа
        fun get {
            return str.char_at(code, index)
        }

        // мэтч символа
        fun is_match(char) {
            if str.char_at(code, index) == char {
                index += 1
                return true
            } else {
                return false
            }
        }

        // съедание символа
        fun advance {
            char := str.char_at(code, index)
            index += 1
            return char
        }

        // в конце ли
        fun is_at_end {
            return code.length() <= index
        }

        // парсинг числа
        fun lex_number(c) {
            string := c.toString()
            is_float := false

            while char.is_digit(get()) or get() == '.' {
                if get() == '.' {
                    if is_float {
                        throw error(
                            'could not parse number with two dots in json',
                            'check your json.'
                        )
                    } else {
                        is_float = true
                    }
                }
                string += advance()
            }

            return new JsonToken(
                JsonTokenType.NUMBER,
                string,
                line
            )
        }

        // парсинг строки
        fun lex_string() {
            string := ''

            while get() != '"' {
                string += advance()
            }

            advance()

            return new JsonToken(
                JsonTokenType.STRING,
                string,
                line
            )
        }

        // парсинг списка
        while is_at_end() == false {
            current := advance()
            match current {
                case '{' -> tokens.add(new JsonToken(JsonTokenType.LBRACE, '{', line))
                case '}' -> tokens.add(new JsonToken(JsonTokenType.RBRACE, '}', line))
                case '[' -> tokens.add(new JsonToken(JsonTokenType.LBRACKET, '[', line))
                case ']' -> tokens.add(new JsonToken(JsonTokenType.RBRACKET, ']', line))
                case ',' -> tokens.add(new JsonToken(JsonTokenType.COMMA, ',', line))
                case '\n' -> line += 1
                case '\t' {}
                case ' ' {}
                case ':' -> tokens.add(new JsonToken(JsonTokenType.COLON, ':', line))
                case '-' -> tokens.add(lex_number(current))
                default {
                    if char.is_digit(current) {
                        tokens.add(lex_number(current))
                    } elif current == '"' {
                        tokens.add(lex_string())
                    } elif current == 't' {
                        for i in 0..3 {
                            advance()
                        }
                        tokens.add(new JsonToken(
                            JsonTokenType.BOOL,
                            'true', line
                        ))
                    } elif current == 'f' {
                        for i in 0..4 {
                            advance()
                        }
                        tokens.add(new JsonToken(
                            JsonTokenType.BOOL,
                            'false', line
                        ))
                    } else {
                        advance()
                    }
                }
            }
        }

        return tokens
    }

    // в мапу
    fun to_map(tokens) {
        // индекс
        index := 0

        // получение символа
        fun get {
            return tokens.get(index)
        }

        // мэтч символа
        fun check(vt) {
            return get().value_type == vt
        }

        // съедание символа
        fun advance(value_type) {
            tk := tokens.get(index)
            if (tk.value_type != value_type) {
                throw error(
                    'json parsing error. expected: ' + value_type + ', got: ' + tk.value_type + ', at: ' + tk.line,
                    'check your json.'
                )
            }
            index += 1
            return tk
        }

        // в конце ли
        fun is_at_end {
            return code.length() <= index
        }

        // ключ значение
        fun value {
            if (check(JsonTokenType.NUMBER)) {
                return convert.parse_float(advance(JsonTokenType.NUMBER).value)
            }
            elif (check(JsonTokenType.STRING)) {
                return advance(JsonTokenType.STRING).value
            }
            elif (check(JsonTokenType.BOOL)) {
                return convert.parse_bool(advance(JsonTokenType.BOOL).value)
            }
            elif (check(JsonTokenType.LBRACE)) {
                 return map()
            }
            elif (check(JsonTokenType.LBRACKET)) {
                return list()
            }
            else {
                throw error(
                    'unexpected value: ' + get().value_type + ', at: ' + get().line,
                    'check your json.'
                )
            }
        }

        // список
        fun list {
            advance(JsonTokenType.LBRACKET)
            if (check(JsonTokenType.RBRACKET)) {
                advance(JsonTokenType.RBRACKET)
                return []
            }
            list := [value()]
            while (check(JsonTokenType.COMMA)) {
                advance(JsonTokenType.COMMA)
                list.add(value())
            }
            advance(JsonTokenType.RBRACKET)
            return list
        }


        // ключ
        fun key {
            k := advance(JsonTokenType.STRING).value
            advance(JsonTokenType.COLON)
            return k
        }

        // мапа
        fun map() {
            advance(JsonTokenType.LBRACE)
            if (check(JsonTokenType.RBRACE)) {
                advance(JsonTokenType.RBRACE)
                return []
            }
            map := {}
            k := key()
            v := value()
            map.set(k, v)
            while check(JsonTokenType.COMMA) {
                advance(JsonTokenType.COMMA)
                k := key()
                v := value()
                map.set(k, v)
            }
            advance(JsonTokenType.RBRACE)
            return map
        }

        // парсинг
        return map()
    }

    fun parse(string) {
        return to_map(lex(string))
    }

    fun encode_list(list) {
        string := '['

        for i in 0..list.size() {
            val := list.get(i)

            if typeof(val) == 'string' {
                string += '"' + val + '"'
            } elif typeof(val) == 'WattList' {
                string += encode_list(val)
            } elif typeof(val) == 'WattMap' {
                string += encode_map(val)
            } else {
                string += val
            }

            if i + 1 < list.size() {
                string += ','
            }
        }

        string += ']'
        return string
    }

    fun encode_map(map) {
        keys := map.keys()
        string := '{'

        for i in 0..keys.size() {
            key := keys.get(i)
            val := map.get(key)

            if typeof(val) == 'string' {
                string += '"' + key +  '": "' + val + '"'
            } elif typeof(val) == 'WattList' {
                string += '"' + key +  '": ' + encode_list(val)
            } elif typeof(val) == 'WattMap' {
                string += '"' + key +  '": ' + encode_map(val)
            } else {
                string += '"' + key +  '": ' + val
            }

            if i + 1 < keys.size() {
                string += ','
            }
        }

        string += '}'
        return string
    }

    fun encode(map) {
        return encode_map(map)
    }
}