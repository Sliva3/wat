import 'std.random'

type Stream(list) {
    fun for_each(fn) {
        for i in list.iter() {
            fn(i)
        }
        return self
    }

    fun sort {
        new_list := list.copy()
        for i in 0..new_list.size() {
            for j in 0..(new_list.size()-i-1) {
                if new_list.get(j) > new_list.get(j + 1) {
                    first := new_list.get(j)
                    second := new_list.get(j + 1)
                    new_list.set(j, second)
                    new_list.set(j + 1, first)
                }
            }
        }
        return new Stream(new_list)
    }

    fun sort_by(fn) {
        new_list := list.copy()
        for i in 0..new_list.size() {
            for j in 0..(new_list.size()-i-1) {
                if fn(new_list.get(j)) > fn(new_list.get(j + 1)) {
                    first := new_list.get(j)
                    second := new_list.get(j + 1)
                    new_list.set(j, second)
                    new_list.set(j + 1, first)
                }
            }
        }
        return new Stream(new_list)
    }

    fun get {
        return self.list
    }

    fun filter(fn) {
        new_list := []
        for elem in list.iter() {
            if fn(elem) {
                new_list.add(elem)
            }
        }
        return new Stream(new_list)
    }

    fun distinct {
        new_list := []
        for elem in list.iter() {
            if !new_list.contains(elem) {
                new_list.add(elem)
            }
        }
        return new Stream(new_list)
    }

    fun take(n) {
        if n > list.size() {
            throw error(
                'could not take: ' + n + ', list size is: ' + list.size(),
                'you can take any number < ' + list.size()
            )
        } else {
            new_list := []
            for i in 0..n {
                new_list.add(list.get(i))
            }
            return new Stream(new_list)
        }
    }

    fun skip(n) {
        if n > list.size() {
            throw error(
                'could not skip: ' + n + ', list size is: ' + list.size(),
                'you can skip any number < ' + list.size()
            )
        } else {
            new_list := []
            for i in n..list.size() {
                new_list.add(list.get(i))
            }
            return new Stream(new_list)
        }
    }

    fun reverse {
        new_list := []
        for i in list.size()..0 {
            new_list.add(list.get(i))
        }
        return new Stream(new_list)
    }

    fun find(fn) {
        for i in list.iter() {
            if fn(i) {
                return i
            }
        }
        return null
    }

    fun all(fn) {
        new_list := []
        for i in list.iter() {
            if fn(i) {
                new_list.add(i)
            }
        }
        return new Stream(new_list)
    }

    fun find_last(fn) {
        last := null
        for i in list.iter() {
            if fn(i) {
                last = i
            }
        }
        return last
    }

    fun max {
        current := 0
        for i in list.iter() {
            if i > current {
                current = i
            }
        }
        return current
    }

    fun min {
        current := 0
        for i in list.iter() {
            if i < current {
                current = i
            }
        }
        return current
    }

    fun delete(fn) {
        for i in list.iter() {
            if fn(i) {
                list.delete(i)
                break
            }
        }
        return self
    }

    fun delete_all(fn) {
        for_delete := []
        for i in list.iter() {
            if fn(i) {
                for_delete.add(i)
            }
        }
        for r in for_delete.iter() {
            list.delete(r)
        }
        return self
    }

    fun map(fn) {
        for i in 0..list.size() {
            list.set(i, fn(list.get(i)))
        }
        return self
    }

    fun avg {
        elements_sum := 0
        for i in list.iter() {
            elements_sum += i
        }
        return elements_sum / list.size()
    }

    fun reduce(initial, fn) {
        accumulator := initial
        for i in list.iter() {
            accumulator = fn(accumulator, i)
        }
        return accumulator
    }

    fun contains(fn) {
        for i in list.iter() {
            if fn(i) {
                return true
            }
        }
        return false
    }

    fun shuffle {
        new_list := list.copy()
        for i in 0..new_list.size() {
            j := random.int(0, new_list.size())
            first := new_list.get(i)
            second := new_list.get(j)
            new_list.set(i, second)
            new_list.set(j, first)
        }
        return new Stream(new_list)
    }
}