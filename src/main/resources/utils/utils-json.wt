import 'std.strings'
import 'std.convert'
import 'std.typeof'

// json token type
unit JsonTokenType {
    STRING := 0
    LBRACE := 1
    RBRACE := 2
    LBRACKET := 3
    RBRACKET := 4
    COMMA := 5
    BOOL := 6
    NUMBER := 7
    COLON := 8
}

// json token
type JsonToken(value_type, value) {

}

// json
unit json {
    // пасирнг ключа
    fun lex(code) {
        tokens := []
        line := 1
        index := 0

        // получение символа
        fun get {
            return str.char_at(code, index)
        }

        // мэтч символа
        fun is_match(char) {
            if str.char_at(code, index) == char {
                index += 1
                return true
            } else {
                return false
            }
        }

        // съедание символа
        fun advance {
            char := str.char_at(code, index)
            index += 1
            return char
        }

        // в конце ли
        fun is_at_end {
            return code.length() <= index
        }

        // парсинг числа
        fun lex_number(c) {
            string := c.toString()
            is_float := false

            while char.is_digit(get()) or get() == '.' {
                if get() == '.' {
                    if is_float {
                        throw error(
                            'could not parse number with two dots in json',
                            'check your json.'
                        )
                    } else {
                        is_float = true
                    }
                }
                string += advance()
            }

            return new JsonToken(
                JsonTokenType.NUMBER,
                string
            )
        }

        // парсинг строки
        fun lex_string() {
            string := ''

            while get() != '"' {
                string += advance()
            }

            advance()

            return new JsonToken(
                JsonTokenType.NUMBER,
                string
            )
        }

        // парсинг списка
        while is_at_end() == false {
            current := advance()
            match current {
                case '{' -> tokens.add(new JsonToken(JsonTokenType.LBRACE, '{'))
                case '}' -> tokens.add(new JsonToken(JsonTokenType.RBRACE, '}'))
                case '[' -> tokens.add(new JsonToken(JsonTokenType.LBRACKET, '['))
                case ']' -> tokens.add(new JsonToken(JsonTokenType.RBRACKET, ']'))
                case ',' -> tokens.add(new JsonToken(JsonTokenType.COMMA, ','))
                case '\n' -> line += 1
                case '\t' {}
                case ' ' {}
                case ':' -> tokens.add(new JsonToken(JsonTokenType.COLON, ':'))
                default {
                    if char.is_digit(current) {
                        tokens.add(lex_number(current))
                    } elif current == '"' {
                        tokens.add(lex_string())
                    } elif current == 't' {
                        for i in 0 to 3 {
                            advance()
                        }
                        tokens.add(new JsonToken(
                            JsonTokenType.BOOL,
                            'true'
                        ))
                    } elif current == 'f' {
                        for i in 0 to 4 {
                            advance()
                        }
                        tokens.add(new JsonToken(
                            JsonTokenType.BOOL,
                            'false'
                        ))
                    } else {
                        throw error('undefined json symbol: ' + current + ' at: ' + line, 'check your json.')
                    }
                }
            }
        }

        return tokens
    }
}