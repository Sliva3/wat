unit Key {

}

type Arc2D(width,height,title) {
    fun init() {
        self.arc_reflection := __refl__.reflect(
            'com.kilowatt.Compiler.Builtins.Libraries.Arc.Arc2D',
            [width, height, title]
        )
    }

    fun run() {
        self.arc_reflection.run()
    }

    fun on_update(fn) {
        self.arc_reflection.on_update(fn)
    }

    fun on_start(fn) {
        self.arc_reflection.on_start(fn)
    }

    fun on_pause(fn) {
        self.arc_reflection.on_pause(fn)
    }

    fun on_resume(fn) {
        self.arc_reflection.on_resume(fn)
    }

    fun on_resize(fn) {
        self.arc_reflection.on_resize(fn)
    }

    fun on_dispose(fn) {
        self.arc_reflection.on_dispose(fn)
    }

    fun on_mouse_down(fn) {
        self.arc_reflection.getInput().on_mouse_down(fn)
    }

    fun on_mouse_up(fn) {
        self.arc_reflection.getInput().on_mouse_up(fn)
    }

    fun on_mouse_dragged(fn) {
        self.arc_reflection.getInput().on_mouse_dragged(fn)
    }

    fun on_mouse_moved(fn) {
        self.arc_reflection.getInput().on_mouse_moved(fn)
    }

    fun on_key_down(fn) {
        self.arc_reflection.getInput().on_key_down(fn)
    }

    fun on_key_up(fn) {
        self.arc_reflection.getInput().on_key_up(fn)
    }

    fun on_typed(fn) {
        self.arc_reflection.getInput().on_typed(fn)
    }

    fun on_scroll(fn) {
        self.arc_reflection.getInput().on_mouse_dragged(fn)
    }

    fun sprite(path) {
        return self.arc_reflection.sprite(path)
    }

    fun font(path) {
        return self.arc_reflection.font(path)
    }

    fun text(font) {
        return self.arc_reflection.text(font)
    }

    fun draw_sprite(sprite) {
        return self.arc_reflection.draw_sprite(sprite)
    }

    fun draw_text(text) {
        return self.arc_reflection.draw_text(text)
    }
}