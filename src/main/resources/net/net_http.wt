import 'std.io'

unit HttpRequestType {
    GET := 'GET'
    POST := 'POST'
    PUT := 'PUT'
    PATCH := 'PATCH'
    HEAD := 'HEAD'
    DELETE := 'DELETE'
    OPTIONS := 'OPTIONS'
}

type HttpResponse(status, headers, body) {}
type HttpRequest(request_type, body) {}

unit http {
    http_reflection := __refl__.reflect(
        'com.kilowatt.Compiler.Builtins.Libraries.Net.NetHttp',
        []
    )

    fun send(url, request) {
        match request.request_type {
            case HttpRequestType.GET {
                return http_reflection.get_request(url)
            }
            case HttpRequestType.POST {
                return http_reflection.post_request(url, request.body)
            }
            case HttpRequestType.PUT {
                return http_reflection.put_request(url, request.body)
            }
            case HttpRequestType.PATCH {
                return http_reflection.put_request(url, request.body)
            }
            case HttpRequestType.DELETE {
                return http_reflection.put_request(url)
            }
            case HttpRequestType.HEAD {
                return http_reflection.head_request(url)
            }
            case HttpRequestType.OPTIONS {
                return http_reflection.options_request(url)
            }
            default {
                throw error(
                    'undefined request type: ' + request.request_type,
                    'possible types: get,post,put,patch,delete,head.'
                )
            }
        }
    }
}

type HttpServer(port) {
    http_server_reflection := __refl__.reflect(
        'com.kilowatt.Compiler.Builtins.Libraries.Net.NetHttpServer',
        []
    )

    fun init {
        self.app := http_server_reflection.app()
    }

    fun run {
        io.println('http server started on: ' + port)
        http_server_reflection.run(app, port)
    }

    fun get(path, fn) {
        http_server_reflection.get(app, path, fn)
    }

    fun delete(path, fn) {
        http_server_reflection.delete(app, path, fn)
    }

    fun put(path, fn) {
        http_server_reflection.put(app, path, fn)
    }

    fun patch(path, fn) {
        http_server_reflection.patch(app, path, fn)
    }

    fun options(path, fn) {
        http_server_reflection.options(app, path, fn)
    }

    fun post(path, fn) {
        http_server_reflection.post(app, path, fn)
    }

    fun head(path, fn) {
        http_server_reflection.head(app, path, fn)
    }

    fun on_error(code, fn) {
        http_server_reflection.on_error(app, code, fn)
    }
}