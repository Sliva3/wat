import 'std.io'

unit WeatherType {
    JSON := 'json'
    JAVA := 'java'
    HTML := 'html'
    XML := 'xml'
}

type OwmClient(api_key) {
    // рефлексия
    owm_reflection := __refl__.reflect(
        'com.kilowatt.Compiler.Builtins.Libraries.Net.NetOwm',
        []
    )
    // соеденение
    connection := owm_reflection.connect(api_key)
    // реквестер
    single_requester := connection.currentWeather().single()

    // получение погоды по кастамайзеру и типу
    fun get_weather(customizer, ret_type) {
        match (ret_type) {
            case 'html' {
                return customizer.retrieve().asHTML()
            }
            case 'java' {
                return customizer.retrieve().asJava()
            }
            case 'json' {
                return customizer.retrieve().asJSON()
            }
            case 'xml' {
                return customizer.retrieve().asXML()
            }
            default {
                throw error('undefined type of weather retrieve: ' + ret_type, 'available: html, java, json, xml')
            }
        }
    }

    // получение погоды в городе по имени
    fun city(name, language, ret_type) {
        match (language) {
            case 'ru' {
                return self.get_weather(
                    single_requester.byCityName(name).language(owm_reflection.RU),
                    ret_type
                )
            }
            case 'en' {
                return self.get_weather(
                    single_requester.byCityName(name).language(owm_reflection.EN),
                    ret_type
                )
            }
            default {
                throw error('lang: ' + language + ' is not available.', 'available: ru, en')
            }
        }
    }

    // получение погоды в городе по ID
    fun city_id {
        return owm_reflection.city_id(single_requester)
    }
}